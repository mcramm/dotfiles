(ns testing)
(require '[timl.file :as file])

;; Config
;; ============================================================================
(set! t:curve-test-file nil)

;; Util
;; ============================================================================

(defn- in-test [path]
  (re-find "test/" path))

(defn- format-path [path type]
  (cond
    (= :javascript_hero type) (-> path
                                  (replace-one "public/javascripts/" "")
                                  (replace "/" ".")
                                  (replace-one ".js" ""))
    (= :javascript_mobile type) (-> path
                                    (replace-one "public/javascripts/test" "")
                                    (replace-one ".js" ""))
    :else path))

(defn- get-type [path]
  (cond
    (re-find "/unit" path) :unit
    (re-find "/functional/" path) :functional
    (re-find "/javascripts/test/curve/" path) :javascript_hero
    (re-find "/javascripts/test/mobile/" path) :javascript_mobile
    :else :all))

(defn- get-preamble [type]
  (cond
    (= :unit type) "script/test -u"
    (= :functional type) "script/test"
    (= :javascript_hero type) "script/jstest-quick"
    (= :javascript_mobile type) "script/jstest-quick"
    (= :all type) (str (get-preamble :unit) " test/unit && " (get-preamble :javascript_hero))
    :else (get-preamble :all)))

;; Runners
;; ============================================================================

(defn run-all-tests []
  (execute (str "!" (get-preamble :all))))

(defn run-test-file [path]
  (let [type (get-type path)
        preamble (get-preamble type)]
  (execute (str "!" preamble " "  (format-path path type)))))

(defn run-tests []
  (let [path (file/expand "%")]
    (when (in-test path)
      (set! t:curve-test-file path))

    (execute "w")
    (execute (str "silent !" (apply str (repeat 10 "echo;"))))

    (if (empty? "t:curve-test-file")
      (run-all-tests)
      (run-test-file t:curve-test-file))))

