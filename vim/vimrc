call pathogen#infect()

set nocompatible
set t_Co=256
colorscheme badwolf

set ruler
syntax on

syntax sync minlines=256

" Set encoding
set encoding=utf-8

" Whitespace stuff
set nowrap
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set autoindent
set smartindent
set list listchars=tab:\ \ ,trail:Â·

" Required to load rvm env in vim
set shell=/bin/sh

syntax enable
filetype plugin indent on

" Make splits open on the right
set splitright

" Make laggy connections work fast
set ttyfast

" Searching
set hlsearch
set incsearch
set ignorecase
set smartcase

" Use blowfish for encryption
setlocal cm=blowfish

" Tab completion
set wildmenu
set wildmode=longest,list

let mapleader = ","

set wildignore+=*.jar,*.class,target/**

" Ctrl-P configuration
set runtimepath^=~/.vim/bundle/ctrlp.vim
let g:ctrlp_map = '<C-T>'
let g:ctrlp_cmd = 'CtrlP'
:map <D-T> :CtrlP<CR>

let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_max_height = 20
let g:ctrlp_max_files = 20000

" Scope CtrlP to some common places
map <leader>gm :CtrlPClearCache<cr>\|:CtrlP app/models<cr>
map <leader>gc :CtrlPClearCache<cr>\|:CtrlP app/controllers<cr>
map <leader>gl :CtrlPClearCache<cr>\|:CtrlP app/lib<cr>
map <leader>gv :CtrlPClearCache<cr>\|:CtrlP app/views<cr>
map <leader>gj :CtrlPClearCache<cr>\|:CtrlP public/javascripts<cr>
map <leader>gt :CtrlPClearCache<cr>\|:CtrlP test/
map <leader>gv :CtrlPClearCache<cr>\|:CtrlP app/views<cr>

" Flush and open CommandT
map <leader>f :CtrlPClearCache<cr>\|:CtrlP<cr>

" Jump to the last line of code when re-opening the file
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal g'\"" | endif
endif

function s:setupWrapping()
  set wrap
  set wm=2
  set textwidth=80
endfunction

function s:setupMarkup()
  call s:setupWrapping()
  map <buffer> <Leader>m :Mm <CR>
endfunction

" make uses real tabs
au FileType make                                     set noexpandtab

" Color clojure parans differently based on depth
" let g:vimclojure#ParenRainbow = 1
" let vimclojure#FuzzyIndent = 1

" Align multi-line strings
let g:clojure_align_multiline_strings = 1

au BufRead,BufNewFile *.{ejs,hjs,tpl} set ft=html

" Thorfile, Rakefile, Vagrantfile and Gemfile are Ruby
au BufRead,BufNewFile {Gemfile,Rakefile,Vagrantfile,Thorfile,config.ru}    set ft=ruby
au BufRead,BufNewFile *.{cljs}    set ft=clojure

au BufRead,BufNewFile *.{json,ts} set ft=javascript
" md, markdown, and mk are markdown and define buffer-local preview
au BufRead,BufNewFile *.{md,markdown,mdown,mkd,mkdn} call s:setupMarkup()

" spellchecking in mutt/text files
au BufRead,BufNewFile ~/.mutt/temp*,*.txt set tw=72 noai noshowmatch
au BufRead,BufNewFile ~/.mutt/temp*,*.txt setlocal spell spelllang=en_us
au BufRead,BufNewFile ~/.mutt/temp*,*.txt syntax off
" spellchecking in markdown
au BufRead,BufNewFile *.{md,markdown,mdown,mkd,mkdn} setlocal spell spelllang=en_us
" spellchecking in git commits
au BufRead,BufNewFile *.git/COMMIT_EDITMSG set noai noshowmatch
au BufRead,BufNewFile *.git/COMMIT_EDITMSG setlocal spell spelllang=en_us

" make python follow PEP8 ( http://www.python.org/dev/peps/pep-0008/ )
au FileType python  set tabstop=4 textwidth=79

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

" Directories for swp files
set backupdir=~/.vim/backup
set directory=~/.vim/backup

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Multipurpose tab key
" Indent if we're at beginning of line, else, do completion
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! InsertTabWrapper()
  let col = col('.') -1
  if !col || getline('.')[col - 1] !~ '\k'
    return "\<tab>"
  else
    return "\<c-p>"
  endif
endfunction
inoremap <tab> <c-r>=InsertTabWrapper()<cr>
inoremap <s-tab> <c-n>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Rename current file
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! RenameFile()
  let old_name = expand('%')
  let new_name = input('New file name: ', expand('%'))
  if new_name != '' && new_name != old_name
    exec ':saveas ' . new_name
    exec ':silent !rm ' .old_name
    redraw!
  endif
endfunction
map <leader>n :call RenameFile()<cr>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Keymappings
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Make W behave like w
command! W write

" Make the 'K' key join 
" nmap K -1J

" Re-select the last visually selected block
nmap gV '[v`]

" Quickly switch back to the last opened file
nnoremap <leader><leader> <c-^>

" Quicker jumping
map <C-j> 10j
map <C-k> 10k

" Hit enter to clear the search highlight
:nnoremap <CR> :nohlsearch<cr>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Status bar
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set laststatus=2

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Running tests (GRB)
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! RunTests(filename)
    " Write the file
    :w
    :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo

    " Run tests for the given filename
    if match(a:filename, '\.feature$') != -1
        exec ":!bundle exec cucumber " . a:filename
    else
        if filereadable("akelos/akelos")
          exec ":!script/test -u test/unit/" . substitute(a:filename, 'test\/unit\/', '', '')
        elseif filereadable("script/test")
            exec ":!script/test " . a:filename
        elseif filereadable("Gemfile")
            exec ":!bundle exec rspec --color " . a:filename
        else
            exec ":!rspec --color " . a:filename
        end
    end
endfunction

function! SetTestFile()
    " Set the spec file that tests will be run for.
    let t:grb_test_file=@%
endfunction

function! RunTestFile(...)
    if a:0
        let command_suffix = a:1
    else
        let command_suffix = ""
    endif

    " Run the tests for the previously-marked file.
    if filereadable("akelos/akelos")
      call SetTestFile()
    else
      let in_test_file = match(expand("%"), '\(.feature\|_spec.rb\)$') != -1
      if in_test_file
          call SetTestFile()
      elseif !exists("t:grb_test_file")
          return
      end
    end
    call RunTests(t:grb_test_file . command_suffix)
endfunction

function! RunNearestTest()
    let spec_line_number = line('.')
    call RunTestFile(":" . spec_line_number)
endfunction

map <leader>t :call RunTestFile()<cr>
map <leader>T :call RunNearestTest()<cr>
map <leader>a :call RunTests('')<cr>
map <leader>c :w\|:!cucumber<cr>
map <leader>w :w\|:!cucumber --profile wip<cr>

" Insert a hash rocket with <c-l>
imap <c-l> <space>=><space>
" " Can't be bothered to understand ESC vs <c-c> in insert mode
imap <c-c> <esc>


" Use clang for synastic and new c++11 stuff
let g:syntastic_cpp_compiler = 'clang++'
let g:syntastic_cpp_compiler_options = ' -std=c++11 -stdlib=libc++'
set colorcolumn=80
